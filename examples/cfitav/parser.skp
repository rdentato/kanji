{
  #include "keywords.h"

  skpfunc(keyword) {
    if (*skpcur < '@' ) {
      switch (*skpcur++) {
        case '+' : skpreturn(skpcur,KW_ADD) ;  
        case '*' : skpreturn(skpcur,KW_MULT) ;  
        case '-' : skpreturn(skpcur,KW_SUB) ;
        case '/' : skpreturn(skpcur,KW_DIV) ;
        case '<' : if (*skpcur == '=') skpreturn(skpcur+1, KW_LE); else skpreturn(skpcur, KW_LT) ;
        case '>' : if (*skpcur == '=') skpreturn(skpcur+1, KW_GE); else skpreturn(skpcur, KW_GT) ;
      }
      skpreturn(NULL,0);
    }

    if (*skpcur <= 'z') {
      int i,j,m,cmp;
      char candidate_kw[8];

     _skptrace("KW: '%.5s'",skpcur);
      for (i=0; i<8; i++) { 
       _skptrace("candidate: %d '%c'",i,*skpcur);
        if ('a' <= *skpcur && *skpcur <= 'z' ) {
          candidate_kw[i] = *skpcur; skpcur++; 
        }
        else if (*skpcur == '?') {
          candidate_kw[i] = *skpcur; skpcur++; 
          break;
        }
        else break;
      }
      if (i >= 8) {
        skpreturn(NULL,0);
      }
      candidate_kw[i] = '\0';

     _skptrace("candidate: '%s'",candidate_kw);

      i = 0; j = keywords_count-1;
     _skptrace("cand next: %d %d",i,j);
      while (i<=j) {
        m = (i+j)/2;
       _skptrace("cand test: '%s'",kwords+(m*8));
        cmp = strcmp(candidate_kw, kwords + (m * 8));
        if (cmp == 0) skpreturn(skpcur, m+1);
        if (cmp < 0) j = m-1;
        else i = m+1;
       _skptrace("cand next: %d %d",i,j);
      }

      skpreturn(NULL,0);
    }

    skpreturn(NULL,0);
  }
}

program =  (__ expression)* _EOF_ ;

expression = _POPEN __ _expr _PCLOSE;

expr = let / lambda / (__ _atom)* ;

let = _'let' _SPC_ letvar _SPC_ ^letexpr ;
letvar = _notkeyword  ;
letexpr = NUMBER / STRING / expression <@"Invalid expression" ;

notkeyword = !(_'let' / _LAMBDA / keyword[]) <@"Can't redefine keyword" _IDENTIFIER <@"Expcting identifier";

lambda = _LAMBDA __ args __ body ;
body = _expression ;

args = _POPEN (__ arg)* _PCLOSE <@"missing lambda arugments";
arg = _IDENTIFIER ;

atom = !(_'let' / _LAMBDA) (keyword[] / NUMBER / STRING / IDENTIFIER / expression)  ;

NUMBER = _"F";
STRING = _"& '\"'" _"Q";
IDENTIFIER = _"I" _"?[?!]" ;
NIL = _"'(' S ')'";

POPEN  = _'(' __ ;
PCLOSE = __ _')' ;

LAMBDA = _'Î»' / _'lambda' ;

_           =    (_"+s" / _"';' N")* ;
SPC_        =    (_"+s" / _"';' N")+ ;
EOF_        = __ _"!." ;
