%%  (C) by Remo Dentato (rdentato@gmail.com)
%% 
%% This software is distributed under the terms of the MIT license:
%%  https://opensource.org/licenses/MIT

%% SUPPORT C FUNCTIONS

{
  #include "parser_aux.c"
  #include "parser_gen.c"
}

%% ACTIONS
{
static int32_t asm_counter = 0;

#define startmain_act    mainnode = astcurnode; \
                         if (!sortfunc()) { \
                           astseterrmsg("duplicate function");\
                           skpast(fail);\
                         } \
                         if (mainnode > 1) asm_counter = 4;\
                         dbgtrc("LBL:%d @:%d",mainnode,asm_counter);

#define endprog_act      astsetlastinfo(mainnode); \
                         dbgtrc("LBL:%d @:%d",astcurnode-1,asm_counter); \
                         cleanfunc();

#define newfunc_act      if (!addfunc(astcurfrom,astcurnode-1)) skpast(fail);\
                         dbgtrc("LBL:%d",astcurnode-1);\
                         skpast(delete);

#define endfunc_act      while (astnodeis(astcur,astcurnode-1,return)) skpast(delete);
                         
#define checkloop_act    if (loopstk_cnt == 0) { \
                           astseterrmsg("break outside loop"); \
                           skpast(fail); \
                         }

#define checkfunc_act    if (infunc == 0) skpast(fail); 

#define fcall_act        int k; \
                         if ( (k = searchfunc(astcurfrom)) < 0) { \
                           astseterrmsg("undefined function"); \
                           skpast(fail); \
                         } \
                         else astretval( k );

#define loopstart_act    skpast(delete); \
                         loopstk_push(astcurnode-1); \
                         dbgtrc("LBL:%d",astcurnode-1);

#define loopend_act      astretval(loopstk_top()); \
                         loopstk_drop(); \
                         dbgtrc("LBL:%d @:%d",astcurnode+3,asm_counter);

}

%% GRAMMAR RULES

prog = fndef*  { startmain_act }
       _block
       endprog   { endprog_act }  ;

endprog = __ {astseterrmsg("Unexpected code after end of program"); }
          _"!."  ;

fndef = _FUNC fndef_name {? infunc = 1; newfunc_act; }
              _block     {  infunc = 0;} {? endfunc_act; }  ;

fndef_name = _fname ;
func_body  = _block;

block = _DO ( _stmt __ )+ _END ;

stmt = __ (  _IF
           / block 
           / loop {? astsettag(astcurnode+1) ;} 
           / (break  / exit / return) {? astsetempty; }
           / _term 
          ) ;

IF = _'?' if   {? astsettag(astcurnode+2) ; dbgtrc("LBL:%d",astcurnode+2);}
          else {? astsettag(astcurnode+1) ; dbgtrc("LBL:%d",astcurnode+1);} endif ;

if    = _block / _stmt ;
else  = (__ _':' (_block / _stmt))? ;
endif = {} ;

loop = LOOP  {? loopstart_act; } 
      _block loopend   ;

loopend = {? loopend_act; };

break  =       { checkloop_act; }  % 'break' is allowed only within a loop
        _BREAK {? astretval(loopstk_top()); } ;

return = { checkfunc_act; }  % 'return' is allowed only within a function
        _RETURN ;  

exit = _EXIT ;

term ={ astseterrmsg("Unknow term"); }
       _num
     / string
     / _'#' label {? astdelete; }
     / op[]  {? asm_counter += 2; }       % Check parser_aux.c for operators.
     / syscall {? asm_counter += 10; }
     / fcall {? asm_counter += 2; }
     / getvar
     / _'@' (setdropvar / setvar);

label = _"D" {? int32_t l=-strtol(astcurfrom,NULL,10); dbgtrc("LBL:%d @:%d", l, asm_counter); } ;

getvar = _"u" {? astretval(*astcurfrom -'@'); }
         _index  ;

setvar = _"u" {? astretval(*astcurfrom -'@'); }
         _index  ;

setdropvar = _'!' _setvar {? astretval(astcurfrom[1] -'@'); } ;

index = ( _'[' ndxpr __ ( _',' ndxpr __ )* _']' )? ;
ndxpr = (__ _term)* ;

fcall = _fname {? fcall_act; } ;

syscall = (_fname _fname) {? astretval(addcall(astcurfrom,astcurptr,astcurnode)); };

fname = _"'.' +[0-5a-z]" ;

num = hex / float / int ;

hex    = _"'0' [Xx] X" {? asm_counter += 6; };
int    = _"D"          {? asm_counter += 6; };
float  = _"D '.' *d"   {? asm_counter += 10; };
string = _"Q"          {? astretval(round2(astcurpos-astprevpos+1-2)); } ;

DO     = __ _"'do'     !& i" __ ;
END    = __ _"'end'    !& i" __ ;
FUNC   = __ _"'func'   !& i" __ ;
LOOP   = __ _"'loop'   !& i" __ ;
BREAK  = __ _"'break'  !& i" __ ;
EXIT   = __ _"'exit'   !& i" __ ;
RETURN = __ _"'return' !& i" __ ;

_     =    (_"+s" / _"'//' N")* ;
SPC_  =    (_"+s" / _"'//' N")+ ;
